pipeline {
    agent any
/**
    triggers {
        pollSCM '* * * * *'
    }
**/    
	
	parameters {
		string(name: 'branch', defaultValue: 'master', description: 'Please enter the branch name')
		string(name: 'git_url', defaultValue: 'https://github.com/cmidhun13/customer-events-master.git', description: 'Please enter git URL')
		string(name: 'container_name', defaultValue: 'customer-events', description: 'Enter container name mentioned in deployment.yml file')
	}
    tools{ 
        gradle 'gradle'
    }
    stages {
		stage('Git Checkout') {
            steps {
                git branch: "${params.branch}", changelog: false, credentialsId: 'github', poll: false, url: "${params.git_url}"
            }
		}	
		stage('SonarQube analysis') {
		    steps {
		        withSonarQubeEnv('SonarQube') {
					sh "chmod +x gradlew"
		            sh "./gradlew sonarqube"
		        }
		    }
		}
		stage('Quality gate') {
		    steps {
		        waitForQualityGate abortPipeline: true
		    }
		}
		stage('Build') {
			steps {
				sh './gradlew assemble'
			}
		}
		stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'OWASP-Dependency-Check'
                dependencyCheckPublisher pattern: '', unstableNewCritical: 1, unstableNewHigh: 1, unstableNewLow: 1, unstableNewMedium: 1, unstableTotalCritical: 1, unstableTotalHigh: 1, unstableTotalLow: 1, unstableTotalMedium: 1
            }
		}
		stage('Test') {
			steps {
				sh './gradlew test'
			}
		}
		stage('Build Docker image') {
			steps {
				sh './gradlew docker'
			}
		}
		stage('Push Docker image') {
			environment {
				DOCKER_HUB_LOGIN = credentials('docker-hub')
			}
			steps {
				sh 'docker login --username=$DOCKER_HUB_LOGIN_USR --password=$DOCKER_HUB_LOGIN_PSW'
				sh './gradlew dockerPush -PdockerHubUsername=$DOCKER_HUB_LOGIN_USR'
			}
		}
		stage (Deploy) {
			steps {
				script {
					sh "sudo su root ; cd ; ./bin/kubectl apply -f /var/jenkins_home/workspace/pipeline/deployment.yml"
					sleep time: 1, unit: 'MINUTES'
					sh "sudo su root ; cd ; ./bin/kubectl apply -f /var/jenkins_home/workspace/pipeline/service.yml"
					sleep time: 1, unit: 'MINUTES'
					sh "sudo su root ; cd ; ./bin/kubectl autoscale deployment ${params.container_name} --cpu-percent=80 --min=1 --max=10 || true"
					sh "sudo su root ; cd ; ./bin/kubectl get svc"
					sh "sudo su root ; cd ; ./bin/kubectl get nodes"
					sh "sudo su root ; cd ; ./bin/kubectl get deployments"
					sh "sudo su root ; cd ; ./bin/kubectl get services"
					sh "sudo su root ; cd ; ./bin/kubectl get pods -o wide"					
					sh "sudo su root ; cd ; ./bin/kubectl get nodes -o wide"
				}
			}
		}
	}
}
